import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader

# 数据预处理
transform = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

# 加载数据集
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
trainloader = DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)

# 测试集
testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
testloader = DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)

# 训练模型预测输入图像的旋转角度，从而得到图像表示旋转角度的特征
import torch.nn as nn
import torch.nn.functional as F

class RotationPredictor(nn.Module):
    def __init__(self):
        super(RotationPredictor, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, 3, padding=1)
        self.conv2 = nn.Conv2d(64, 128, 3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(128 * 16 * 16, 512)
        self.fc2 = nn.Linear(512, 4)  # 4 类别：0, 90, 180, 270 度

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 128 * 16 * 16)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x


import torch.optim as optim

# 初始化模型和优化器
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
rotation_predictor = RotationPredictor().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(rotation_predictor.parameters(), lr=0.001)

# 训练循环
num_epochs = 10
for epoch in range(num_epochs):
    running_loss = 0.0
    for i, (images, _) in enumerate(trainloader):
        images = images.to(device)

        # 随机旋转图像
        angles = torch.randint(0, 4, (images.size(0),)).to(device)
        rotated_images = torch.stack([torch.rot90(images[j], k, (1, 2)) for j, k in enumerate(angles)])

        # 前向传播
        outputs = rotation_predictor(rotated_images)
        loss = criterion(outputs, angles)

        # 反向传播和优化
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(trainloader):.4f}')

# 使用预训练的模型提取图像特征
def extract_features(model, dataloader, device):
    model.eval()
    features = []
    labels = []

    with torch.no_grad():
        for images, targets in dataloader:
            images = images.to(device)
            targets = targets.to(device)
            feature_maps = model(images)
            features.append(feature_maps.cpu().numpy())
            labels.append(targets.cpu().numpy())

    features = np.concatenate(features, axis=0)
    labels = np.concatenate(labels, axis=0)
    return features, labels

train_features, train_labels = extract_features(rotation_predictor, trainloader, device)
test_features, test_labels = extract_features(rotation_predictor, testloader, device)

# 使用提取的特征训练一个逻辑回归分类器，用于图像分类
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# 训练分类器
classifier = LogisticRegression(max_iter=1000)
classifier.fit(train_features, train_labels)

# 评估分类器
train_pred = classifier.predict(train_features)
test_pred = classifier.predict(test_features)
train_acc = accuracy_score(train_labels, train_pred)
test_acc = accuracy_score(test_labels, test_pred)

print(f'Train Accuracy: {train_acc:.4f}')
print(f'Test Accuracy: {test_acc:.4f}')





















